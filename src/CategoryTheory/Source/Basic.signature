-- 
-- defines a basic category structure 
--

module Abstract.Naive.Basic

infix class ~>, |~>|

structure Graph (ob : Type) where
    (|~>|) : ob ->> Type

implicit Type @ Graph 
implicit Graph @ Graph
implicit GraphMorphism @ Graph

structure EnrichedGraph (over : Type) (ob : over) where
    (~>) : ob ->> over

implicit Type @ EnrichedGraph Type
implicit Graph @ EnrichedGraph Graph
implicit (over @ Graph) => (EnrichedGraph over @ Graph)

signature Classic0Monoid (class carrier : Type) where
    unit/(1) : () -> carrier
    product/(#) : (carrier, carrier) -> carrier

signature UnbiasedClassic0Monoid = Algebra List

!FreeClassic0Monoid: Type -> Classic0Monoid
!FreeClassic0MonoidFunctor0: TypeClassic0Category -> Classic0MonoidClassic0Category
!FreeClassic0Monoid @ Adjunction
!Classic0Monoid <|~>| Algebra List

implicit Type @ Classic0Monoid
implicit Graph @ Classic0Monoid
implicit (over @ Monoid) => (EnrichedGraph over @ Classic0Monoid)
implicit Classic0Monoid @ Graph
implicit Classic0Monoid @ Classic0Monoid 

signature (Graph Type, Classic0Monoid Type, Graph ob) =>
  Classic0Category (class ob : Type) where
    Id : {o : ob} -> 1 -> (o|~>|o)      
    Mul : {o1, o2, o3 : ob} -> (o1|~>|o2) # (o2|~>|o3) -> (o1|~>|o3)

implicit Type @ Classic0Category
implicit Graph @ Classic0Category
implicit (over @ Classic0Category) => (EnrichedGraph over @ Classic0Category)
implicit Classic0Monoid @ Classic0Category
?implicit Classic0Category @ Graph
?implicit Classic0Category @ EnrichedGraph Classic0Category ???
?implicit Classic0Category @ Classic0Monoid
?implicit Classic0Category @ Classic0Category

!DualCat
!PathCat
!Classic0Monoid ==> Classic0Category

!Free: Graph -> Classic0Category
  
signature 
  (Graph over, Classic0Monoid over, EnrichedGraph over ob) =>
  EnrichedClassic0Category
    {over : Type}
    (class ob : Type) 
  where
    RId : {o : ob} -> 1 |~>| (o~>o)      
    RMul : {o1, o2, o3 : ob} -> (o1~>o2) # (o2~>o3) |~>| (o1~>o3)
  
signature 
  (Graph Type, Classic0Category ob) => 
  Groupoid0
    (class ob : Type) 
  where
    Inv : {o1, o2 : ob} ->  (o1|~>|o2) -> (o2|~>|o1)

signature 
  (Graph over, EnrichedClassic0Category over ob) => 
  EnrichedGroupoid0
    {over : Type}
    (class ob : Type) 
  where
    Inv : {o1, o2 : ob} -> (o1~>o2) |~>| (o2~>o1)

implicit Groupoid0 : Graph
implicit Groupoid0 : Monoid

signature 
  (EnrichedClassic0Category ob (|~>|)) =>
  Category1
    (class ob : Type) 
    (implicit class (|~>|) : ob ->> Setoid)
  where
    IdNeutralLeft : 
      {o1, o2 : ob} ->
      (m : o1 |~>| o2) :|~>| (1 >>> m |~>| m)
  -- ...

