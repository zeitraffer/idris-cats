-- 
-- defines a basic category structure 
--

module Abstract.Naive.Basic

infix class :>, ~>

structure 
  Relation 
    (ob : Type) 
  where
    (~>) : ob ->> Type

implicit Type @ Relation 
implicit Relation @ Relation
implicit RelationMorphism @ Relation

structure 
  EnrichedRelation 
    (over : Type)
    (ob : over)
  where
    (:>) : ob ->> over

implicit Type @ EnrichedRelation Type
implicit Relation @ EnrichedRelation Relation
implicit (over @ Relation) => (EnrichedRelation over @ Relation)

signature Monoid0
    (class carrier : Type)
  where
    unit/(1) : () -> carrier
    product/(#) : (carrier, carrier) -> carrier

implicit Type @ Monoid0
implicit Relation @ Monoid0
implicit (over @ Monoid) => (EnrichedRelation over @ Monoid0)
implicit Monoid0 @ Relation
implicit Monoid0 @ Monoid0 

signature
  (Relation Type, Monoid0 Type, Relation ob) =>
  Category0 -- = Poset
    (class ob : Type) 
  where
    Id : {o : ob} -> 
      1 -> (o~>o)      
    Mul : {o1, o2, o3 : ob} -> 
      (o1~>o2) # (o2~>o3) -> (o1~>o3)

implicit Type @ Category0
implicit Relation @ Category0
implicit (over @ Category0) => (EnrichedRelation over @ Category0)
implicit Monoid0 @ Category0
?implicit Category0 @ Relation
?implicit Category0 @ EnrichedRelation Category0 ???
?implicit Category0 @ Monoid0
?implicit Category0 @ Category0

!DualCat
!PathCat
!Monoid0 ==> Category0
  
signature 
  (Relation over, Monoid0 over, EnrichedRelation over ob) =>
  EnrichedCategory0
    {over : Type}
    (class ob : Type) 
  where
    RId : {o : ob} -> 
      1 ~> (o:>o)      
    RMul : {o1, o2, o3 : ob} -> 
      (o1:>o2) # (o2:>o3) ~> (o1:>o3)
  
signature 
  (Relation Type, Category0 ob) => 
  Groupoid0
    (class ob : Type) 
  where
    Inv : {o1, o2 : ob} -> 
      (o1~>o2) -> (o2~>o1)

signature 
  (Relation over, EnrichedCategory0 over ob) => 
  EnrichedGroupoid0
    {over : Type}
    (class ob : Type) 
  where
    Inv : {o1, o2 : ob} -> 
      (o1:>o2) ~> (o2:>o1)

implicit Groupoid0 : Relation
implicit Groupoid0 : Monoid

signature 
  (EnrichedCategory0 ob (~>)) =>
  Category1
    (class ob : Type) 
    (implicit class (~>) : ob ->> Setoid)
  where
    IdNeutralLeft : 
      {o1, o2 : ob} ->
      (m : o1 ~> o2) :~> (1 >>> m ~> m)
  -- ...

